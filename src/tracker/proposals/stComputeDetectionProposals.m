function [frmProposal, noOfDetProp] = stComputeDetectionProposals( model, image, plattModel, ...
    prevBaseAngle, prevDet, searchScaleRange, maxNoOfDet, frmProposal, flags, ...
    noOfProp, prevMeanAngleConf )
% Compute and return object proposals obtained from the detector
%
% INPUTS
%   model - an instance of TBDModel class
%   image - the current frame of the video
%   plattModel - an instance of PlattModel class
%   prevBaseAngle - rotation angle from previous result
%   prevDet - previous rectangular bounding box
%   searchScaleRange - list of scale values to test
%   maxNoOfDet - maximum number of proposals to be generated
%   frmProposal - structure containing data about the proposals of the
%                 current frame
%   flags - structure with binary valued flags
%   noOfProp - number of proposals already generated by other functions
%   prevMeanAngleConf - mean of previous angle confidences
%
% OUTPUTS
%   frmProposal - updated structure containing data about the proposals of the
%                 current frame
%   noOfDetProp - number of proposals generated by this step
%
% AUTHORS
%   Yang Hua (Yang.Hua@inria.fr)
%   Henrique Morimitsu (Henrique.Morimitsu@inria.fr)
%
% Licensed under the BSD 3-clause license [see license.txt]
%


    global VERBOSITY;
    rotIm = image;
    if prevBaseAngle ~= 0
        rotIm = imrotate(image, -prevBaseAngle, 'bicubic', 'loose');
    end
    [detbb, ~] = model.det.detectOneFrmLocally(model, rotIm, ...
                 prevDet(1:4), maxNoOfDet, searchScaleRange);  
    if flags.USE_PLATT_MAPPING_FLAG
        detbb(:, 6) = plattModel.computePlattScaledScores(detbb(:, 5));
    else
        detbb(:, 6) = 0.0;
    end
 
    detRegionRot = galRectXY2Region(detbb(:, 1:4));    
    noOfDetProp = min(maxNoOfDet, size(detbb, 1));

    detRegion = detRegionRot;
    if prevBaseAngle ~= 0
        %should rotate det back to region
        detRegion = zeros(noOfDetProp, 8);
        [rotHeight, rotWidth, ~] = size(rotIm);
        for kBB = noOfDetProp:-1:1
            detRegion(kBB, :) = galRotateRegion(detRegionRot(kBB, :), -prevBaseAngle, rotWidth, rotHeight, image);
        end
    end
        
    if VERBOSITY > 1
        fprintf('Detection proposals\n');
        printRectInfo(detbb);
        printRegionInfo(detRegion);
    end
    
    frmProposal = stAddFrmProposalData( frmProposal, noOfProp+1, noOfProp+noOfDetProp,...
        detbb, detRegion, repmat(prevBaseAngle, noOfDetProp, 1), ...
        repmat(prevMeanAngleConf, noOfDetProp, 1), repmat({rotIm}, noOfDetProp, 1) );

end

